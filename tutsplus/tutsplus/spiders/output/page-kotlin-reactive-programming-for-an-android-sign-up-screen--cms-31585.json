{"fileName": "kotlin-reactive-programming-for-an-android-sign-up-screen--cms-31585", "title": ["Kotlin Reactive Programming for an Android Sign-Up Screen"], "author": ["Jessica Thornsby"], "auther_details": [], "length": ["Intermediate", "Long"], "body": ["RxJava 2.0 is a popular reactive programming library that\u2019s helped countless Android developers create highly responsive apps, using less code and less complexity, ", "especially", " when it comes to managing multiple threads.", "If you\u2019re one of the many developers who\u2019s made the switch to Kotlin, then it doesn\u2019t mean you need to give up on RxJava!\u00a0", "In the ", "first part of this series", ", I showed you how to move from programming with RxJava 2.0 in Java to programming with RxJava in ", "Kotlin.", " We also looked at how to banish boilerplate from your projects by taking advantage of RxKotlin\u2019s extension functions, and the secret to dodging the SAM conversion problem that many developers encounter when they first start using RxJava 2.0 with Kotlin.\u00a0", "In this second instalment, we\u2019ll be concentrating on how RxJava can help solve the issues you\u2019ll encounter in real-life Android projects, by creating a reactive Android application using RxJava 2.0, RxAndroid and RxBinding.", "In our ", "Reactive Programming with RxJava and RxKotlin", " article, we created some simple ", "Observables", " and ", "Observers", " that print data to Android Studio\u2019s ", "Logcat", "\u2014but this isn\u2019t how you\u2019ll use RxJava in the real world.", "In this article, I'm going to show\u00a0you how to use RxJava to create a screen that\u2019s used in countless Android applications: the classic ", "Sign Up", " screen.\u00a0", "If your app has\u00a0", "any", "\u00a0kind of sign-up\u00a0experience, then it\u2019ll typically have strict rules about the kind of information it accepts. For example, maybe the password needs to exceed a certain number of characters, or the email address must be in a valid email format.", "While you ", "could", " check the user\u2019s input once they hit the\u00a0", "Sign Up", "\u00a0button, this isn\u2019t the best user experience, as it leaves them open to submitting information that\u2019s clearly never going to be accepted by your application.", "It\u2019s far better to monitor the user as they\u2019re typing, and then give them a heads-up as soon as it becomes clear they\u2019re entering information that doesn\u2019t meet your app\u2019s requirements. By providing this kind of live and ongoing feedback, you give the user the opportunity to correct their mistakes\u00a0", "before", "\u00a0hitting that\u00a0", "Sign Up", "\u00a0button.", "While you\u00a0", "could", "\u00a0monitor user activity using vanilla Kotlin, we can deliver this functionality using much less code by enlisting the help of RxJava, plus a few other related libraries.", "Let\u2019s start by building our user interface. I\u2019m going to add the following:", "Here\u2019s my finished layout:", "You can copy/paste this into your app if you want, or you can just ", "download the project source code from our GitHub repo", ".", "Now let\u2019s look at how we can use RxJava, plus a few related libraries, to monitor user input and provide feedback in real time.\u00a0", "I\u2019ll be tackling the ", "Sign Up", " screen in two parts. In the first section, I\u2019ll show you how to use the RxBinding library to register and respond to text change events. In the second section, we\u2019ll create some transformation functions that validate the user\u2019s input, and then display an error message where appropriate.", "Create a new project with the settings of your choice, but when prompted, make sure you select the ", "Include Kotlin Support", " checkbox.\u00a0", "In this section, we\u2019ll implement the following functionality:\u00a0", "RxBinding is a library that makes it easier to convert a wide range of UI events into Observables, at which point you can treat them just like any other RxJava data stream.", "We\u2019re going to monitor text change events, by combining RxBinding\u2019s ", "widget.RxTextView", " with the ", "afterTextChangeEvents", " method, for example:", "The problem with treating text change events as data streams is that initially both the ", "enterEmail", " and ", "enterPassword EditTexts", " will be empty, and we don\u2019t want our app to react to this empty state as though it\u2019s the first data emission in the stream. RxBinding solves this problem by providing a ", "skipInitialValue()", " method, which we\u2019ll use to instruct each Observer to ignore their stream\u2019s initial value.", "I look at the RxBinding library in greater detail in my ", "RxJava 2 for Android Apps", " article.", "To deliver the best user experience, we need to display any relevant password or email warnings after the user has finished typing, but before they hit the ", "Sign Up", " button.", "Without RxJava, identifying this narrow window of time would typically require us to implement a ", "Timer", ", but in RxJava we just need to apply the ", "debounce()", " operator to our data stream.", "I\u2019m going to use the ", "debounce()", " operator to filter out all text change events that happen in quick succession, i.e. when the user is still typing. Here, we\u2019re ignoring all text change events that happen within the same 400-millisecond window:", "The RxAndroid library\u2019s ", "AndroidSchedulers.mainThread", " gives us an easy way to switch to Android\u2019s all-important main UI thread.", "Since it\u2019s only possible to update Android\u2019s UI from the main UI thread, we need to make sure we\u2019re in this thread before we attempt\u00a0to display any email or password warnings, and before we display our ", "Toast", ".\u00a0", "To receive the data being emitted by ", "enterEmail", ", we need to subscribe to it:", "Eventually, we want our application to respond to text change events by validating the user\u2019s input, but to help keep things straightforward, at this point I\u2019m simply going to display a ", "Toast", ".\u00a0", "Your code should look something like this:", "Since we\u2019re using a few different libraries, we need to open our project\u2019s ", "build.gradle", " file and add RxJava, RxBinding and RxAndroid as project dependencies:\u00a0", "You can test this part of your project by installing it on your physical Android smartphone or tablet, or Android Virtual Device (AVD). Select the ", "enterEmail", " ", "EditText", " and start typing; a ", "Toast", " should appear when you stop typing.\u00a0", "Next, we need to lay down some ground rules about the kind of input our application will accept, and then check the user\u2019s input against this criteria and display an error message where appropriate.\u00a0", "Checking the user\u2019s email or password is a multi-step process, so to make\u00a0our code easier to read, I\u2019m going to combine all of these steps into their own ", "transformation function.", "\u00a0", "Here\u2019s the start of the ", "validateEmail", " transformation function:", "In the above code, we\u2019re using the ", "filter()", " operator to filter the Observable\u2019s output based on whether it matches Android\u2019s ", "Patterns.EMAIL_ADDRESS", " pattern.", "In the next part of the transformation function, we need to specify what happens if the input doesn\u2019t match the ", "EMAIL_ADDRESS", " pattern. By default, every unrecoverable error will trigger a call to ", "onError()", ", which terminates the data stream. Instead of ending the stream, we want our application to display an error message, so I\u2019m going to use ", "onErrorResumeNext", ", which instructs the Observable to respond to an error by passing control to a new Observable, rather than invoking ", "onError()", ". This allows us to display our custom error message.", "The final step is to apply this transformation function to the email data stream, using the ", ".compose()", " operator. At this point, your ", "MainActivity.kt", " should look something like this:\u00a0", "Install this project on your Android device or AVD, and you\u2019ll find that the email portion of the ", "Sign Up", " screen is now checking your input successfully. Try entering anything other than an email address, and the app will warn you that this isn\u2019t a valid input.\u00a0", "At this point, we have a fully functioning ", "enterEmail", " field\u2014and implementing ", "enterPassword", "\u00a0is mostly just a case of repeating the same steps.", "In fact, the only major difference is that our ", "validatePassword", " transformation function needs to check for different criteria. I\u2019m going to specify that the user\u2019s password input must be at least 7 characters long:\u00a0", "After repeating all of the previous steps, the completed ", "MainActivity.kt", " should look something like this:\u00a0", "Install this project on your Android device or AVD, and experiment with typing into the ", "enterEmail", " and ", "enterPassword", " fields. If you enter a value that doesn\u2019t meet the app\u2019s requirements, then it\u2019ll display the corresponding warning message, ", "without", " you having to tap the ", "Sign Up", " button.", "You can ", "download this complete project from GitHub", ".", "In this article, we looked at how RxJava can help solve the real-world problems you\u2019ll encounter when developing your own Android applications, by using RxJava 2.0, RxBinding and RxAndroid to create a ", "Sign Up", " screen.\u00a0", "For more background information about the RxJava library, be sure to check out our ", "Get Started With RxJava 2.0", " article.\u00a0"], "pubished_date": ["6 Aug 2018"]}