{"fileName": "save-time-with-the-css-grid-shorthand-property--cms-31590", "title": ["Save Time With the CSS \u201cgrid\u201d Shorthand Property"], "author": ["Ian Yates"], "auther_details": ["Web Design editor at Envato Tuts+"], "length": ["Beginner", "Short"], "body": ["In past tutorials we\u2019ve learned how to set up a grid, defining its explicit properties (like ", "grid-template-columns", " and ", "grid-template-areas", ") and even some of its implicit properties (like ", "grid-auto-columns", "). In this tutorial we\u2019re going to look at the shorthand property ", "grid", " which quickly deals with all of the above in a single statement.", "As usual, begin by declaring ", "display: grid;", " on your container. Next, use the ", "grid", " property to lay out your rows, then your columns:", "The above statement says we want three explicit rows of 100px, auto, and 300px. And (using the ", "repeat()", " function) two columns of 1fr, then one of 100px. It\u2019s exactly the same as this longer version:", "Both statements give us this:", "Implicit values are what we ask Grid to use beyond the explicit values we define. In the ", "grid", " shorthand we can\u2019t combine the two so we have to make a choice. Take a look at this, for example:", "In this case we\u2019ve stuck with explicit columns (one of 1fr, another of 100px) but our rows use an abbreviated form of ", "grid-auto-flow", " and ", "grid-auto-rows", ". It says ", "\u201cwhen you need to add more tracks to the grid, add them as rows. And make each one 100px high.\u201d", " It\u2019s the same as this:", "This is fairly default behaviour, but we see a bigger change if we instead ask our implicit grid to use extra columns:", "This gives us two rows of 100px and 300px, then effectively sets\u00a0", "grid-auto-flow: column;", ". It\u2019s\u00a0the same as:", "Now, the auto-placement algorithm places items from top to bottom, adding columns \r\nto the right when it runs out of space:", "Note", ": we can\u2019t declare\u00a0", "auto-flow", " on both rows ", "and", " columns, that won\u2019t work.", "If you think back to our tutorial\u00a0", "Understanding the CSS Grid \u201cAuto-Placement Algorithm\u201d", " you\u2019ll remember we discussed ", "sparse", " and ", "dense", "; keywords which describe the way items are packed into a grid. These can also be used alongside\u00a0", "auto-flow", ", like this:", "Template areas are a way of naming areas of our grid, in what\u2019s almost a visually representative way. In its simplest form, we would just use ", "grid", " to describe our template areas and nothing else:", "Then we\u2019d state which area each grid item fills, like this:\u00a0", "If you recall ", "our original template areas tutorial", ", we had some more details to give us column and row dimensions:", "We can do that too, as follows:", "We add the column widths after the forward slash (the ", "repeat()", " function won\u2019t work in this case, but I don\u2019t know why). And we add the row heights inline after the area declarations. This is what we end up with:", "This tutorial should have given you an understanding of how the ", "grid", " shorthand property works. Play around with it, see what other aspects of the CSS Grid module you can use with it, and let us know how much time it saves you!"], "pubished_date": ["6 Aug 2018"]}