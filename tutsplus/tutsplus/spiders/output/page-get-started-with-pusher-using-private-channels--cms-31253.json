{"fileName": "get-started-with-pusher-using-private-channels--cms-31253", "title": ["Get Started With Pusher: Using Private Channels"], "author": ["Jeremy McPeak"], "auther_details": [], "length": ["Short"], "body": ["In this series, we've been learning about\u00a0", "Channels from Pusher", ", a platform that allows you to give your users the seamless real-time experience they want.\u00a0", "Private channels provide your applications with a secure, private medium for publishing messages. The best part is how easy it is to implement and use private channels for your apps. You'll learn how to use them in this post.\u00a0", "In the previous video, we looked at a very simple chat application that had no users and no security; it was just anonymous chat. It works, don't get me wrong, but we can do better!\u00a0So in this video, we'll look at a slightly different version of that chat application. The front-end is mostly the same, but the back-end is a Laravel application.", "Even though the app is powered by Laravel, the same principles are used to handle our messages. Instead of a single file, we now have a\u00a0", "ChannelsController", " to handle our Channels-oriented stuff, and it has a ", "sendMessage()", " method that handles incoming chat requests from the client. You can see its code below:", "I want to protect our chat so that only authenticated users can access it, and you can see in the above code that it checks if the user is authenticated before it triggers the ", "send-message", " event. That's a good start, but it is not enough to fully protect our chat because anyone who has access to our application key and cluster information can potentially subscribe to and listen for any messages sent over our application's public channels. To completely protect our chat, we need to use a private channel to send our messages, and the first step is to create a private channel.", "To create a private channel, we simply trigger an event on a channel with a ", "private-", " prefix. So we can change the previous call to ", "trigger()", " to be the following code:", "This code will now send our messages through the ", "private-chat", " channel, and from the server's perspective, that is the only thing the server needs in order to send messages over a private channel. Clients, however, need to authenticate in order to subscribe to a private channel, and they do so by sending requests to a specialized endpoint.", "When a client library attempts to subscribe to a private channel, it issues a POST request to an authorization endpoint. This endpoint has a single job: to determine if the user is authenticated and respond with an appropriate response.\u00a0 A new method called ", "authorizeUser()", " will handle this request, and its code is very simple.", "It first checks the user's authentication status, and it responds with 403 Forbidden if the user is not logged in. But if the user's auth check passes, the ", "authorizeUser()", " method needs to output a special value that is derived from two values from the request's body.\u00a0", "The output is generated by the Pusher library's ", "socket_auth()", " method, as shown in the above code. If the resulting output matches the value expected by the client library, then the client is authenticated and can subscribe to the private channel.\u00a0", "Thankfully, this whole process is automated; we just have to configure the client to send authorization requests to this endpoint.", "When you create a ", "Pusher", " object for the client library, you can configure the resulting object to send authentication requests to a specific endpoint. Simply add an ", "authEndpoint", " option and set it to the URL of your endpoint, as shown in the following code.", "You can also set any authentication headers with the ", "auth", " option. This code sets the ", "X-CSRF-Token", " header to prevent cross-site request forgery attacks.", "Now, when the client attempts to subscribe to a private channel, it will authenticate using the provided endpoint URL and allow or deny access to the channel based on the response.", "Using private channels dramatically increases the security of your application, and configuring your applications to use them is a breeze. With\u00a0", "Channels", "\u00a0from Pusher,\u00a0it is incredibly easy to add secure real-time communication to your apps, and it doesn't even require a lot of code!"], "pubished_date": ["9 Aug 2018"]}