{"fileName": "google-flutter-from-scratch-grids-lists-and-data-sources--cms-31624", "title": ["Google Flutter From Scratch: Grids, Lists, and Data Sources"], "author": ["Ashraff Hathibelagal"], "auther_details": [], "length": ["Intermediate", "Medium"], "body": ["Almost every non-trivial mobile app today is likely to have lists in its layouts. That's because using a scrollable list is often the most straightforward way to display a large number of similar items on a small screen.\u00a0", "The Flutter framework offers several widgets you can use to efficiently, and with minimal code, create and display such lists. In this tutorial, I'll show you how to use them with both local and remote data sources.", "If you need to display a small number of similar items, and you are sure that the user's screen will be able to accommodate all of them at the same time, using the ", "Column", "\u00a0widget is the most efficient thing to do.", "To create a list in your Flutter app, you can use the ", "List", "\u00a0class that the Dart programming language offers. After creating the list, you can use its ", "add()", "\u00a0method to add any number of items to it. The following code shows you how to create a list containing three\u00a0", "RaisedButton", "\u00a0widgets:", "Note that each item in the list has an empty ", "onPressed", " event handler associated with it because, without that, the item would be disabled.", "Now that the list is ready, you can directly assign it to the ", "children", "\u00a0property of the\u00a0", "Column", "\u00a0widget to be displayed. Usually, however, you'll also want to specify where the list items should be placed on the screen. Because the ", "Column", "\u00a0widget is a flex widget, you can control the positions of the items along its main axis and cross axis using the\u00a0", "mainAxisAlignment", "\u00a0and ", "crossAxisAlignment", "\u00a0properties. By default, for the\u00a0", "Column", "\u00a0widget, the main axis is the vertical axis, and the cross axis is the horizontal axis.", "The following code shows you how to stretch the three buttons across the horizontal axis and place them in the center of the screen vertically:", "Here's what the column will look like now:", "It is important to note that you will encounter a runtime error if a ", "Column", "\u00a0widget is unable to accommodate all its children. For example, if you had over a dozen\u00a0", "RaisedButton", "\u00a0widgets in your list instead of three, you would see an error message that looks like this:", "For slightly larger lists, lists whose contents are likely to overflow the screen, you must consider using a ", "ListView", "\u00a0widget because it supports scrolling.", "You may have noticed that the code we wrote to create the list in the previous step was both lengthy and repetitive. Creating a larger list using the same approach can be very tedious. An easy alternative approach is to use two lists instead: one containing the data, and one containing the widgets.", "Here's how you can use the ", "[]", "\u00a0operator to quickly create a data list, which, for now, only contains several strings:", "To convert the above list of strings into a list of ", "RaisedButton", "\u00a0widgets, you can use the\u00a0", "map()", "\u00a0and ", "toList()", "\u00a0methods. With the ", "map()", "\u00a0method, you can you use each string to generate a new ", "RaisedButton", "\u00a0widget. And with the ", "toList()", "\u00a0method, you can convert the ", "Iterable", "\u00a0object returned by the ", "map()", "\u00a0method into an actual ", "List", "\u00a0object. The following code shows you how:", "For the sake of completeness, the above code also shows you how to create an\u00a0", "onPressed", "\u00a0event handler that uses the ", "canLaunch()", "\u00a0and ", "launch()", "\u00a0methods offered by the ", "url_launcher", "\u00a0package to open the website the user selected in the default browser.", "Once your list is ready, you can pass it to the ", "children", "\u00a0property of the ", "ListView", "\u00a0widget to display it.", "At this point, if you run the app, you should be able to scroll through the list and press any button to launch the associated website.", "The ", "ListView", "\u00a0widget allows you to place only one item on its cross axis. The item will, by default, be stretched to occupy all the space available on that axis. If you want more flexibility, you should consider using a ", "GridView", "\u00a0widget instead, which lets you specify how many items you want on the cross axis.", "The following code uses the ", "GridView.count()", "\u00a0constructor to create a ", "GridView", "\u00a0widget that displays two items per row:", "Here's what the grid looks like:", "For data lists that contain more than a few dozen items, you should avoid generating widget lists manually, the way you did in an earlier step. Why? Because creating a widget is an expensive operation, and large lists of widgets can consume a lot of memory.", "Instead, you should use the\u00a0", "IndexedWidgetBuilder", "\u00a0function, which lets you generate widgets only when the user needs to see them. With it, you can lazily generate widgets as the user scrolls through your ", "ListView", "\u00a0widget.", "It is quite unlikely that you're going to have large amounts of data defined right inside your apps. Usually, you would be fetching such data from a remote server. Therefore, to give you a realistic example, let me now show you how to fetch 100 questions from ", "Stack Overflow", " using the Stack Exchange\u00a0", "API", " and display them on demand.", "Start by creating a subclass of the ", "StatefulWidget", "\u00a0class, which will act as a container for your ", "ListView", "\u00a0widget and override its ", "createState()", "\u00a0method.", "The ", "MyState", "\u00a0class mentioned in the above code doesn't exist yet, so create it and override its ", "build()", "\u00a0method.", "Next, add a ", "List", "\u00a0object as one of the member variables of the class. You'll be using it to store the questions you downloaded from Stack Overflow. Additionally, add the API's endpoint as another variable.", "Unless you want your user to press a button to download the questions, I suggest you download them automatically when the widget is initializing. Accordingly, override the\u00a0", "initState()", "\u00a0method and make a call to a new asynchronous method called\u00a0", "loadData()", ".", "Inside the ", "loadData()", "\u00a0method, you can use the ", "get()", "\u00a0function of Dart's ", "http", "\u00a0package to download the questions. The API endpoint returns a JSON document, which you can parse by using the ", "json.decode()", "\u00a0function available in Dart's\u00a0", "convert", "\u00a0package. The following code shows you how:", "Once the JSON document has been converted into a ", "Map", "\u00a0object, you can use the value associated with\u00a0its\u00a0", "items", "\u00a0key to initialize the ", "questions", "\u00a0variable. The variable, however, is a part of the widget's state. Therefore, you must make sure you update it inside the\u00a0", "setState()", "\u00a0method only. Here's how:", "At this point you can create a new ", "ListView", "\u00a0widget using the\u00a0", "ListView.builder()", "\u00a0constructor, which expects an ", "IndexedWidgetBuilder", "\u00a0function and an item count as its arguments. For now, the item count is nothing but the size of the\u00a0", "questions", "\u00a0list. Accordingly, add the following code inside the ", "build()", "\u00a0method of the ", "MyState", "\u00a0class:", "Inside the builder function, all you need to do is create a small widget tree to display various details about each question you downloaded. Flutter's ", "material", "\u00a0package offers a very handy widget called ", "ListTile", ", which allows you to quickly create such a tree while adhering to the Material Design guidelines.", "The following code shows you how to display the question's title and author, using the\u00a0", "title", "\u00a0and ", "subtitle", "\u00a0properties of the ", "ListTile", "\u00a0widget:", "Lastly, create a new ", "Scaffold", "\u00a0widget, assign the ", "ListView", "\u00a0widget to its ", "body", "\u00a0property, and return it from the ", "build()", "\u00a0method so it can be used with a ", "MaterialApp", "\u00a0widget. Optionally, you can add an ", "AppBar", "\u00a0widget to the ", "Scaffold", "\u00a0widget.", "Here's what the app will look like after it has downloaded the questions:", "You now know how to work with lists in a Flutter application. In this tutorial, you learned not only how to create lists and grids that support large data sources, but also how to make each item inside them interactive. To learn more about lists in Flutter, you can refer to the official ", "documentation", "."], "pubished_date": ["10 Aug 2018"]}