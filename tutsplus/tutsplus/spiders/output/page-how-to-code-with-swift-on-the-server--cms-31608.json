{"fileName": "how-to-code-with-swift-on-the-server--cms-31608", "title": ["How to Code With Swift on the Server"], "author": ["Doron Katz"], "auther_details": ["iOS Architect & Technical Project Manager/San Francisco, U.S.A"], "length": ["Intermediate", "Medium"], "body": ["Since Apple first introduced Swift as the successor to Objective-C, it has revolutionized how the community codes iOS, macOS, watchOS and tvOS apps. When Swift became an open-source platform, it opened new possibilities for the language beyond mobile and client-side apps\u2014Swift became a server language too! In this tutorial, you'll learn what server-side Swift is and why you would want to have Swift on your back-end.\u00a0", "The server-side Swift initiative is being pushed by three prominent projects\u2014", "Vapor by Qutheory", ",\u00a0", "IBM\u2019s Kitura", ", and\u00a0", "Perfect", "\u2014with the goal of letting Swift developers create\u00a0fully fledged back-end services. This, in essence, will transform such developers into full-stack developers, negating the need for reliance on Node or PHP or giving control to a BaaS platform such as Google\u2019s Firebase.\u00a0", "In this article, you will learn all about server-side Swift. First I'll explain how server-side Swift works, and then I'll show you how to get started with the Kitura, Vapor, and Perfect frameworks.", "Swift", "\u00a0was first announced by Apple in 2014 and quickly became one of the fastest-growing programming languages. Swift draws from many of the best contemporary languages, such as Python, allowing elegance and ease of use. It frees engineers from the technical shackles of Objective-C, allowing more fluid and intuitive work.\u00a0", "In December 2015, Apple made another monumental announcement and made the Swift language\u2014along with its supporting libraries, debugger, and package manager\u2014an open-source project under\u00a0the\u00a0", "Apache 2.0 license", ", opening up the platform for the public to create pull requests and contribute. The shift away from Objective-C has not only enticed the many Objective-C developers contributing to the App Store, but it has made it easier for developers of all skills and backgrounds to enter the Apple ecosystem with Swift.\u00a0", "However, while Apple\u2019s development tools have historically made it easier for developers to create visually compelling and engaging apps for the App Store, one notable bottleneck has been that projects still needed specialized\u00a0back-end developers to create complex data-driven applications. So iOS and macOS developers\u00a0would either need to engage the assistance of a Python, PHP or Node developer to create their back-end database or pick up the skill themselves, resulting in a significantly heavier workload to complete their project objectives.\u00a0", "Although back-end-as-a-service (BaaS)\u00a0has come to the rescue of iOS developers, with no-code back-end solutions such as Google\u2019s\u00a0", "Firebase", "\u00a0and Apple\u2019s very own\u00a0", "CloudKit", "\u00a0which alleviate the\u00a0complexities of the back-end, many teams and projects demand more. This is where server-side Swift comes in, allowing you to create a fully fledged multi-threaded back-end server that is open-sourced and infinitely configurable.\u00a0", "Server-side Swift lets you choose\u00a0how you host your back-end server, whether\u00a0with AWS, RackSpace, or your own physical servers. You can also choose how to load balance your servers (e.g. via popular server solutions such as NGINX) and how to persist your data in a database (be it NoSQL solutions such as MongoDB, or traditional databases such as Postgres, MySQL, or Oracle). Not only that, but you\u00a0are never tied to one component solution\u2014you can switch up without affecting your entire app\u00a0codebase.\u00a0", "The point is that by opting for an open-source server-side Swift solution such as\u00a0", "Vapor by Qutheory", ",\u00a0", "IBM\u2019s Kitura", ", or\u00a0", "Perfect", ", you take advantage of a vast array of plugins that allow you to configure your back end just the way you want it, making use of your existing team\u2019s skill set in Swift to do so.\u00a0", "Server-side Swift certainly sounds compelling, but which framework is right for you? Next we take a look at each one in turn, starting with Kitura.", "Starting with\u00a0", "Kitura", ", you have a platform that was initially released in February 2016 and gained prominence later that year at Apple\u2019s WWDC, representing IBM\u2019s foray into supporting server-side web with Swift, which was then set to\u00a0transition from Apple\u2019s hands to open source.\u00a0", "Generally speaking, Kitura is focused on convention over configuration: it builds your initial project out with stubs, before you opt for the specific frameworks and libraries you are looking to build. Kitura\u2019s authentication mechanism is supported by its very own\u00a0", "Kitura-Credentials", "\u00a0middleware framework, allowing you to choose from a smorgasbord of authentication mechanisms, from the traditional username/password to social-media login and federated authentication, using OpenID which handles\u00a0", "JSON Web Tokens", "\u00a0(JWT).", "Kitura\u2019s database ORM solution is powered by\u00a0", "Kuery", "\u00a0to obfuscate the complexities of dealing with SQL directly, supporting common relational databases such as MySQL, SQLite and PostgreSQL natively, as well as other database solutions, including NoSQL databases, through the various other compatible plugins.\u00a0", "Kitura also provides other useful plugins for things such as\u00a0HTML templating, using popular plugins such as\u00a0", "Stencil", "\u00a0and\u00a0", "Markdown", ". Coming from IBM, the server-side framework also benefits from intimate connectivity with IBM Watson APIs as well as providing native macOS support for integrating directly into their\u00a0", "Bluemix", "\u00a0cloud platform. This provides an additional option at your disposal, along with your other traditional deployment options across Linux/Unix and macOS servers.\u00a0", "While the platform certainly does provide a unique set of features\u2014from\u00a0", "Kuery", "\u00a0to the ability to integrate with the various IBM API libraries\u2014it doesn\u2019t have the community clout that Vapor has. Adopting Kitura requires appreciating and embracing its own non-conventional ways of doing things, from how\u00a0", "Kuery", "\u00a0operates to its authentication mechanisms. However,\u00a0given that it is backed by a large company with a focus on the enterprise, there are some future-proofing assurances built in.\u00a0", "The quickest way to get started is by using Kitura\u2019s command-line interface (CLI), supported on both macOS and Linux. Using the popular package management utility\u00a0", "Homebrew", ", install Kitura and Kitura CLI by entering the following:", "Within an empty folder that you will use as your project, run the following to initialize your project:", "When it's done generating your skeleton application, you will notice a new project called\u00a0", "HelloKitura.xcodeproject", ". You can learn more about project generation by referring to\u00a0", "Kitura\u2019s official documentation", ". You can open the newly generated project in Xcode and edit the primary application class,\u00a0", "Application.swift", ", to handle all calls to your server\u2019s root ", "http://localhost:8080/", "\u00a0URL:", "The code snippet above responds by returning the classic ", "Hello, World!", ". Before you can finally run the project,\u00a0change\u00a0your Xcode scheme to point to\u00a0HelloKitura\u00a0(your active project), and kick off your project by\u00a0pressing\u00a0", "Command", "-", "R", ". While your server is running, in a browser of your choice, go to\u00a0", "http://localhost:8080", "\u00a0", "and you should see the hello world\u00a0text in your browser.\u00a0", "Check out the following links for more information about Kitura.", "Released a few months later than Kitura, in September 2016,\u00a0", "Vapor by Qutheory", "\u00a0is widely considered the most popular in terms of community size and number of plugins. It's built on top of Apple\u2019s\u00a0", "Swift-nio", "\u00a0framework, making it a true performance powerhouse. Unlike Kitura and other platforms, which aren\u2019t built purely in Swift but rather on Node.js or other intermediary parsers, Vapor decouples itself from any of those dependencies to deliver a Swift parser and provide clear and readable APIs.", "Vapor provides comprehensive support of databases for SQL vendors such as MySQL and PostgreSQL, as well as NoSQL vendors such as Redis and MongoDB, like Kitura. Whereas Kitura has its own\u00a0", "Kuery", "\u00a0ORM solution, Vapor leverages\u00a0", "Fluent ORM", "\u00a0to support the databases I just mentioned, making it relatively easy to extend the ORM to other third-party database providers. Vapor separates itself from the other frameworks in natively supporting Apple\u2019s Push Notification Service, as well as supporting SMTP for pushing email notifications.\u00a0", "Whereas Kitura implements its own authentication framework, Vapor has\u00a0", "Stormpath\u2019s Turnstile authentication library", "\u00a0baked in natively. Like Kitura, the platform also supports the Mustache and Markdown templates, as well as its own Swift-native expressive templating language,\u00a0", "Leaf", ". Vapor also comes with its own CLI engine like the other server-side Swift frameworks, with the ability to extend the application command-line arguments with custom flags.\u00a0", "To get started with Vapor, you start by installing the\u00a0", "Vapor toolbox", ",\u00a0which consists of all the library dependencies and the CLI toolkit. Install it with Homebrew\u00a0by\u00a0entering the following in the terminal:", "When installation has completed, you can confirm Vapor has installed successfully\u00a0by typing\u00a0", "vapor \u2014help", ". To create a project, type in the following,\u00a0substituting\u00a0with your own project name:", "The Vapor engine will build a folder structure resembling the following:", "To actually create an Xcode project, you will also need to explicitly enter the following command, from within the project folder:\u00a0", "Finally, to build and run your project, from Xcode\u00a0select the ", "Run", " scheme\u00a0as well as the deployment target device of\u00a0", "My Mac", ", and then\u00a0press the ", "Run", " button\u00a0as you would do for any other Xcode project. Provided your Xcode project doesn\u2019t encounter any errors, you should see\u00a0the following confirmation message in the terminal:", "Go ahead and enter that URL in your browser of choice, and you should see your application running.\u00a0", "Check out the following links for more information.", "Finally, we take a look at\u00a0", "Perfect", "\u00a0by PerfectlySoft, a feature-rich server-side platform like Vapor and Kitura. Perfect includes the same standard bells and whistles you would find on the previous vendors, from templating with Mustache or Markdown to networking with web sockets, as well as Apple Push Notification and SMTP.", "Like the other server-side platforms, Perfect has its own ORM implementation, the\u00a0", "StORM platform", "\u00a0(Perfect StORM), which provides native support for MySQL, PostgreSQL and other prominent relational databases, as well as MongoDB, Redis, and other NoSQL solutions. One notable omission from Perfect is a CLI, but the framework\u00a0makes up for this with a native macOS app.", "Like Vapor, Perfect also has\u00a0", "Turnstile", "\u00a0baked in to power its authentication mechanism, extended to interact with StORM more intimately. Another distinction that this solution has over the others is in many of the native utility libraries it supports, including their very own cURL wrapper as well as tools for working with files and folders. Perfect\u2019s developer base\u00a0is the second largest, almost on par with Vapor's, meaning you have a strong community to back this platform, along with a rich set of educational resources to give you confidence if you choose it.", "Getting up and running with Perfect is really straightforward. First,\u00a0clone\u00a0the PerfectlySoft repo, by entering the following:", "From within the cloned folder, build the project:", "Finally, run the project, which will run a local server on address\u00a0", "0.0.0.0:8181", ":", "You can also run your project on Xcode by first generating a new project, as follows:", "Within Xcode, ensure your executable target is pointed at\u00a0", "My Mac", ", before\u00a0building and running the project.", "Check out the following links for more information about the Perfect framework.", "The release of Swift to the open-source community has instigated a push for Swift solutions beyond client apps, with back-end server frameworks\u00a0becoming the next frontier. Pushed by three prominent projects\u2014", "Vapor by Qutheory", ",\u00a0", "IBM\u2019s Kitura", ", and\u00a0", "Perfect", "\u2014server-side Swift has enabled iOS (and macOS) engineers to become full-stack developers. This can negate the dependence\u00a0on Node.js, PHP or .NET back-end engineers. Server-side Swift also gives teams the ability to control their back-end without having to rely on mobile back-end-as-a-service\u00a0solutions like Firebase or CloudKit.", "Server-side Swift isn\u2019t for everyone: you have to decide on how much control you need for your back-end, and whether it does make sense for you to roll your own. Also, I didn't try to tell you\u00a0which server-side Swift solution is best. Developers are certainly spoiled for choice, and all three provide a unique and mature take and are worth experimenting with. I would encourage you to play around with each of the sample codes, evaluate the syntax, and engage with their respective communities to see which solution fits you best."], "pubished_date": ["6 days ago"]}