{"fileName": "kotlin-reactive-programming-with-rxjava-and-rxkotlin--cms-31577", "title": ["Kotlin Reactive Programming With RxJava and RxKotlin"], "author": ["Jessica Thornsby"], "auther_details": [], "length": ["Intermediate", "Long"], "body": ["Since becoming an officially supported language for Android development, Kotlin has rapidly grown in popularity amongst Android developers, with Google reporting ", "a 6x increase", " in the applications that are created using Kotlin.", "If you've previously used RxJava or RxAndroid and want to make the switch to Kotlin, or want to start reactive programming with Kotlin, this tutorial is for you. We\u2019ll cover the essentials of creating RxJava 2.0 ", "Observers", ", ", "Observables", " and data streams in Kotlin, before looking at how you can trim a tonne of boilerplate code from your projects, by combining RxJava with Kotlin extension functions.", "Using RxJava with Kotlin can help you create highly reactive apps in less code, but no programming language is perfect, so I\u2019ll also be sharing a workaround for the SAM conversion problem that many developers encounter when they first start using RxJava 2.0 with Kotlin.", "To wrap things up, we\u2019ll create an application that demonstrates how you might use RxJava to solve some of the issues you encounter in real-life Android projects.", "If this is your first taste of RxJava, then along the way I\u2019ll also be providing all the background information you need to understand the core RxJava concepts. Even if you\u2019ve never experimented with RxJava before, by the end of this article you\u2019ll have a solid understanding of how to use this library in your projects, ", "and", " you\u2019ll have created several working apps, using RxJava, RxKotlin, RxAndroid, and RxBinding.", "RxJava is an open-source implementation of the ReactiveX library that helps you create applications in the reactive programming style. Although RxJava is designed to process synchronous and asynchronous streams of data, it isn\u2019t restricted to \u201ctraditional\u201d data types. RxJava\u2019s definition of \"data\" is pretty broad and includes things like caches, variables, properties, and even user input events such as clicks and swipes. Just because your application doesn\u2019t deal with huge numbers or perform complex data transformations, it doesn\u2019t mean that it can\u2019t benefit from RxJava!", "For a little background on using RxJava for Android apps, you can check out some of my other posts here on Envato Tuts+.", "So how does RxJava work?", "RxJava extends the Observer software design pattern, which is based around the concept of Observers and Observables. To create a basic RxJava data pipeline, you need to:", "As soon as the Observable has at least one Observer, it\u2019ll start emitting data. Every time the Observable emits a piece of data, it\u2019ll notify its assigned Observer by calling the ", "onNext()", " method, and the Observer will then typically perform some action in response to this data emission. Once the Observable has finished emitting data, it\u2019ll notify the Observer by calling ", "onComplete()", ". The Observable will then terminate, and the data stream will end.", "If an exception occurs, then ", "onError()", " will be called, and the Observable will terminate immediately without emitting any\u00a0more data or calling ", "onComplete()", ".", "But RxJava isn\u2019t ", "just", " about passing data from an Observable to an Observer! RxJava has a ", "huge collection of operators", " that you can use to filter, merge, and transform this data. For example, imagine your app has a ", "Pay Now", " button that detects ", "onClick", " events, and you\u2019re worried that an impatient user might tap the button multiple times, causing your app to process several payments.\u00a0\u00a0", "RxJava lets you transform these ", "onClick", " events into a data stream, which you can then manipulate using RxJava\u2019s various operators. In this particular example, you could use the ", "debounce()", " operator to filter data emissions that happen in quick succession, so even if the user bashes away at the ", "Pay Now", " button, your app will only ever register a single payment.", "We\u2019ve seen how RxJava can help you solve a specific problem, in a specific application, but what does it have to offer Android projects, in general?", "RxJava can help simplify your code by giving you a way to write what you want to achieve, rather than writing a list of instructions that your application has to work through. For example, if you wanted to ignore all data emissions that happen within the same 500-millisecond period, then you\u2019d write:", "In addition, since RxJava treats ", "almost everything", " as data, it provides a template that you can apply to a wide range of events: create an Observable, create an Observer, subscribe the Observer to the Observable, rinse and repeat. This formulaic approach results in much more straightforward, human-readable code.", "The other major benefit for Android developers is that RxJava can take much of the pain out of multithreading on Android. Today\u2019s mobile users expect their applications to be able to multitask, even if it\u2019s something as simple as downloading data in the background while remaining responsive to user input.", "Android has several built-in solutions for creating and managing multiple threads, but none of these are particularly easy to implement, and they can quickly result in complex, verbose code that\u2019s difficult to read and prone to errors.", "In RxJava, you create and manage additional threads using a combination of operators and schedulers. You can easily change the thread where work is performed, using the ", "subscribeOn", " operator plus a scheduler. For example, here we\u2019re scheduling work to be performed on a new thread:", "You can specify where the results of this work should be posted, using the ", "observeOn", " operator. Here, we\u2019re posting the results to Android\u2019s all-important main UI thread, using the ", "AndroidSchedulers.mainThread", " scheduler, which is available as part of the RxAndroid library:", "Compared to Android\u2019s built-in multithreading solutions, RxJava\u2019s approach is ", "much", " more concise and easier to understand.", "Again, you can learn more about how RxJava works, and the benefits of adding this library to your project, in my\u00a0", "Get Started With RxJava 2 for Android", "\u00a0article.", "Since Kotlin is 100% interoperable with Java, you can use most Java libraries in your Kotlin projects without any difficulties\u2014and the RxJava library is no exception.", "There ", "is", " a dedicated ", "RxKotlin library", ", which is a Kotlin wrapper around the regular RxJava library. This wrapper provides extensions that optimize RxJava for the Kotlin environment and can further reduce the amount of boilerplate code you need to write.", "Since you can use RxJava in Kotlin without ever needing RxKotlin, we\u2019ll be using RxJava throughout this article, unless stated otherwise.", "Observers and Observables are the building blocks of RxJava, so let\u2019s start by creating:", "Create a new project with the settings of your choice, but make sure you select the ", "Include Kotlin support", " checkbox when prompted. Next, open your project\u2019s ", "build.gradle", " file and add the RxJava library as a project dependency:", "Then, open your project\u2019s ", "activity_main.xml", " file and add the button that\u2019ll start the data stream:", "There are several different ways to create an Observable, but one of the easiest is to use the ", "just()", " operator to convert an object or list of objects into an Observable.", "In the following code, we\u2019re creating an Observable (", "myObservable", ") and giving it the items 1, 2, 3, 4, and 5 to emit. We\u2019re also creating an Observer (", "myObserver", "), subscribing it to ", "myObservable", ", and then telling it to print a message to ", "Logcat", " every time it receives a new emission.", "You can now put this application to the test:", "At this point, the Observable will start emitting its data, and the Observer will print its messages to Logcat. Your Logcat output should look something like this:", "You can ", "download this project from GitHub", "\u00a0if you want to try it for yourself.", "Now that we\u2019ve seen how to set up a simple RxJava pipeline in Kotlin, let\u2019s look at how you can achieve this in ", "less", " code, using RxKotlin\u2019s extension functions.", "To use the RxKotlin library, you need to add it as a project dependency:", "In the following example, we\u2019re using RxKotlin\u2019s ", "toObservable()", " extension function to transform a ", "List", " into an Observable. We\u2019re also using the ", "subscribeBy()", " extension function, as it allows us to construct an Observer using named arguments, which results in clearer code.", "Here is the output that you should see:", "RxKotlin also provides an important workaround for the ", "SAM conversion issue", " that can occur when there are multiple SAM parameter overloads on a given Java method. This SAM ambiguity confuses the Kotlin compiler, as it cannot work out which interface it\u2019s supposed to convert, and your project will fail to compile as a result.", "This SAM ambiguity is a particular problem when using RxJava 2.0 with Kotlin, as many of the RxJava operators take multiple SAM-compatible types.", "Let\u2019s look at the SAM conversion problem in action. In the following code, we\u2019re using the ", "zip()", " operator to combine the output of two Observables:\u00a0\u00a0", "This will cause the Kotlin compiler to throw a type inference error. However, RxKotlin provides helper methods and extension functions for the affected operators, including ", "Observables.zip()", ", which we\u2019re using in the following code:", "Here's the output of this code:", "In this tutorial, I showed you how to start using the RxJava library in your Kotlin projects, including using a number of additional supporting libraries, such as RxKotlin and RxBinding. We looked at how you can create simple Observers and Observables in Kotlin, right through to optimizing RxJava for the Kotlin platform, using extension functions.", "So far, we\u2019ve used RxJava to create simple Observables that emit data, and Observers that print this data to Android Studio\u2019s Logcat\u2014but this isn\u2019t how you\u2019ll use RxJava in the real world!", "In the next post,\u00a0we\u2019re going to look at how RxJava can help solve real-world problems you\u2019ll encounter when developing Android applications. We'll\u00a0use RxJava with Kotlin\u00a0to create a classic\u00a0", "Sign Up", "\u00a0screen."], "pubished_date": ["30 Jul 2018"]}